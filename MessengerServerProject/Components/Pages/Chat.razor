@page "/chat"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

@inject SignalRService SignalRService

<PageTitle>Chat</PageTitle>



<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    // private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {

    }


    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            await SignalRService.StartConnectionAsync();
            if (SignalRService._hubConnection is not null)
            {
                SignalRService._hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
             {
                 var encodedMsg = $"{user}: {message}";
                 messages.Add(encodedMsg);
                 InvokeAsync(StateHasChanged);
             });
            }
        }
    }


    private async Task Send()
    {
        if (SignalRService._hubConnection is not null)
        {
            await SignalRService._hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        SignalRService._hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (SignalRService._hubConnection is not null)
        {
            await SignalRService._hubConnection.DisposeAsync();
        }
    }
}
